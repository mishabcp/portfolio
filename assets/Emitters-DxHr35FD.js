const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/EmittersPlugin-nsnCTRi-.js","assets/index-XgrrP6Ri.js","assets/index-BttXQbzh.css","assets/AnimatableColor-BirSBxMU.js","assets/AnimationOptions-Ceu2kBrD.js","assets/OptionsColor-CHai0-E7.js","assets/EmitterInstance-BshhCW0K.js"])))=>i.map(i=>d[i]);
import{S as u,_ as c,Y as l,$ as d,a0 as y,e as f}from"./index-XgrrP6Ri.js";class v{constructor(i,e){this.container=e,this._engine=i,this.array=[],this.emitters=[],this.interactivityEmitters={random:{count:1,enable:!1},value:[]};const s=0;e.getEmitter=t=>t===void 0||u(t)?this.array[t??s]:this.array.find(r=>r.name===t),e.addEmitter=async(t,r)=>this.addEmitter(t,r),e.removeEmitter=t=>{const r=e.getEmitter(t);r&&this.removeEmitter(r)},e.playEmitter=t=>{const r=e.getEmitter(t);r&&r.externalPlay()},e.pauseEmitter=t=>{const r=e.getEmitter(t);r&&r.externalPause()}}async addEmitter(i,e){const{Emitter:s}=await c(async()=>{const{Emitter:a}=await import("./EmittersPlugin-nsnCTRi-.js").then(o=>o.b);return{Emitter:a}},__vite__mapDeps([0,1,2,3,4,5])),{EmitterInstance:t}=await c(async()=>{const{EmitterInstance:a}=await import("./EmitterInstance-BshhCW0K.js");return{EmitterInstance:a}},__vite__mapDeps([6,0,1,2,3,4,5])),r=new s;r.load(i);const n=new t(this._engine,this,this.container,r,e);return await n.init(),this.array.push(n),n}handleClickMode(i){const e=this.emitters,s=this.interactivityEmitters;if(i!=="emitter")return;let t;if(s&&l(s.value))if(s.value.length>0&&s.random.enable){t=[];const o=[];for(let m=0;m<s.random.count;m++){const h=d(s.value);if(o.includes(h)&&o.length<s.value.length){m--;continue}o.push(h),t.push(y(s.value,h))}}else t=s.value;else t=s==null?void 0:s.value;const r=t??e,n=this.container.interactivity.mouse.clickPosition;f(r,async a=>{await this.addEmitter(a,n)})}async init(){if(this.emitters=this.container.actualOptions.emitters,this.interactivityEmitters=this.container.actualOptions.interactivity.modes.emitters,!!this.emitters)if(l(this.emitters))for(const i of this.emitters)await this.addEmitter(i);else await this.addEmitter(this.emitters)}pause(){for(const i of this.array)i.pause()}play(){for(const i of this.array)i.play()}removeEmitter(i){const e=this.array.indexOf(i);e>=0&&this.array.splice(e,1)}resize(){for(const i of this.array)i.resize()}stop(){this.array=[]}update(i){for(const e of this.array)e.update(i)}}export{v as Emitters};
